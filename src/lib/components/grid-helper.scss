/**
 * Grid Helper Utilities
 * 
 * A map-based responsive CSS Grid system with flexible breakpoint configuration.
 * Uses Sass maps for cleaner breakpoint management and provides mixins for creating
 * responsive grid containers with automatic border handling.
 */

@use './theme-variables.scss' as *;
@use 'sass:map';
@use 'sass:list';

// Responsive breakpoint definitions
$breakpoints: (xs: 640px, sm: 768px, md: 1024px, lg: 1280px, xl: 1536px);

@function join($list, $sep) {
	$s: "";
	$result: "";

	@each $str in $list {
		$result: "#{$result}#{$s}#{$str}";
		$s: $sep;
	}

	@return $result;
}

/**
 * Safely retrieves an item from a list at the specified index.
 * Returns the default value if the index is out of bounds.
 * 
 * @param {List} $list - The list to retrieve from
 * @param {Number} $index - The 1-based index to retrieve
 * @param {*} $default - Default value to return if index is out of bounds
 * @return {*} The list item or default value
 */
@function get-list($list, $index, $default: null) {
	@if length($list) >= $index {
		@return list.nth($list, $index);
	}
	@return $default;
}


/**
 * Creates a responsive CSS Grid container with map-based breakpoint configurations.
 * 
 * @param {Map} $columns - Map of column counts for each breakpoint (default, xs, sm, md, lg, xl)
 * @param {Map} $rows - Map of row counts for each breakpoint (default, xs, sm, md, lg, xl)
 * 
 * @example
 *   $columns: (default: 1, sm: 2, md: 3, lg: 4);
 *   $rows: (default: 3, sm: 2, md: 1);
 *   @include grid-container($columns, $rows);
 */
@mixin grid-container($columns, $rows) {
	display: grid;
	@if map.has-key($columns, 'default') and map.has-key($rows, 'default') {
		grid-template-columns: #{join(map.get($columns, 'default'), " ")};
		grid-template-rows: #{join(map.get($rows, 'default'), " ")};
	}

	@each $key, $value in $columns {
		@media (min-width: $value) {
			grid-template-columns: #{join(map.get($columns, $key), " ")};
			grid-template-rows: #{join(map.get($rows, $key), " ")};
		}
	}
}

/**
 * Media query mixin for responsive design using breakpoint keys.
 * 
 * @param {String} $key - Breakpoint key from $breakpoints map (xs, sm, md, lg, xl)
 * 
 * @example
 *   @include respond-to(md) {
 *     font-size: 18px;
 *   }
 */
@mixin respond-to($key) {
	@media (min-width: map.get($breakpoints, $key)) {
		@content
	}
}

/**
 * Internal mixin for applying grid cell positioning and border styles.
 * Automatically manages borders to avoid double borders between cells.
 * 
 * @param {List} $pos - Position data (column-start, row-start, column-span, row-span)
 * @param {Number} $column-max - Maximum number of columns in the grid
 * @param {Number} $row-max - Maximum number of rows in the grid
 * @param {Color} $color - Border color
 * @param {Length} $width - Border width
 */
@mixin grid-cell-styles($pos, $column-max, $row-max, $color, $width) {
	$column-start: get-list($pos, 1);
	$row-start: get-list($pos, 2);
	$column-end: $column-start + get-list($pos, 3, 1);
	$row-end: $row-start + get-list($pos, 4, 1);

	grid-row: #{$row-start} / #{$row-end};
	grid-column: #{$column-start} / #{$column-end};

	@if $row-end > $row-max {
		border-bottom: none;
	} @else {
		border-bottom: $width solid $color;
	}
	@if $column-end > $column-max {
		border-right: none;
	} @else {
		border-right: $width solid $color;
	}
}

/**
 * Positions a grid cell responsively using maps with automatic border management.
 * Each cell can have different positioning and spanning behavior at each screen size.
 * 
 * @param {Map} $pos - Map of position tuples for each breakpoint
 *                     Format: (default: (col-start row-start col-span row-span), sm: (...), ...)
 * @param {Map} $columns - Column counts map for each breakpoint (from grid-container)
 * @param {Map} $rows - Row counts map for each breakpoint (from grid-container)
 * @param {Length} $width - Border width (defaults to theme thick border)
 * @param {Color} $color - Border color (defaults to theme border color)
 * 
 * @example
 *   $positions: (default: (1 1 1 1), md: (1 1 2 1));
 *   @include grid-cell($positions, $grid-columns, $grid-rows);
 */
@mixin grid-cell(
	$pos,
	$columns,
	$rows,
	$width: $size-layout-thickness-thick,
	$color: $palette-functional-border
) {
	@if map.has-key($pos, 'default') {
		@include grid-cell-styles(
			map.get($pos, 'default'),
				list.length(map.get($columns, 'default')),
				list.length(map.get($rows, 'default')),
			$color,
			$width
		);
	}

	@each $key, $val in $pos {
		@media (min-width: $val) {
			@include grid-cell-styles(
				map.get($pos, $key),
				list.length(map.get($columns, $key)),
				list.length(map.get($rows, $key)),
				$color,
				$width
			);
		}
	}
}
