/**
 * Grid Helper Utilities
 * 
 * A responsive CSS Grid system with flexible breakpoint-based layout control.
 * Provides mixins for creating responsive grid containers and positioning grid cells
 * across different screen sizes with automatic border management.
 */

@use './theme-variables.scss' as *;
@use 'sass:list';

// Responsive breakpoint definitions
$breakpoint-names: xs, sm, md, lg, xl;
$breakpoint-sizes: 640px, 768px, 1024px, 1280px, 1536px;

/**
 * Safely retrieves an item from a list at the specified index.
 * Returns the default value if the index is out of bounds.
 * 
 * @param {List} $list - The list to retrieve from
 * @param {Number} $index - The 1-based index to retrieve
 * @param {*} $default - Default value to return if index is out of bounds
 * @return {*} The list item or default value
 */
@function get-list($list, $index, $default: null) {
	@if length($list) >= $index {
		@return list.nth($list, $index);
	}
	@return $default;
}

/**
 * Creates a responsive CSS Grid container with breakpoint-specific column and row configurations.
 * 
 * @param {List} $columns - List of column counts for each breakpoint (base, xs, sm, md, lg, xl)
 * @param {List} $rows - List of row counts for each breakpoint (base, xs, sm, md, lg, xl)
 * 
 * @example
 *   $columns: 1, 1, 2, 3, 4, 4;  // 1 col mobile, 2 col tablet, 3+ col desktop
 *   $rows: 3, 3, 2, 1, 1, 1;     // 3 rows mobile, fewer on larger screens
 *   @include grid-container($columns, $rows);
 */
@mixin grid-container($columns, $rows) {
	display: grid;
	grid-template-columns: repeat(var(--col-num, list.nth($columns, 1)), 1fr);
	grid-template-rows: repeat(list.nth($rows, 1), 1fr);

	@for $i from 1 through list.length($breakpoint-names) {
		$size: list.nth($breakpoint-sizes, $i);
		@media (min-width: $size) {
			grid-template-columns: repeat(list.nth($columns, $i + 1), 1fr);
			grid-template-rows: repeat(list.nth($rows, $i + 1), auto);
		}
	}
}

/**
 * Internal mixin for applying grid cell positioning and border styles.
 * Automatically manages borders to avoid double borders between cells.
 * 
 * @param {List} $pos - Position data (column-start, row-start, column-span, row-span)
 * @param {Number} $column-max - Maximum number of columns in the grid
 * @param {Number} $row-max - Maximum number of rows in the grid
 * @param {Color} $color - Border color
 * @param {Length} $width - Border width
 */
@mixin grid-cell-styles($pos, $column-max, $row-max, $color, $width) {
	$column-start: get-list($pos, 1);
	$row-start: get-list($pos, 2);
	$column-end: $column-start + get-list($pos, 3, 1);
	$row-end: $row-start + get-list($pos, 4, 1);

	grid-row: #{$row-start} / #{$row-end};
	grid-column: #{$column-start} / #{$column-end};

	@if $row-end > $row-max {
		border-bottom: none;
	} @else {
		border-bottom: $width solid $color;
	}
	@if $column-end > $column-max {
		border-right: none;
	} @else {
		border-right: $width solid $color;
	}
}

/**
 * Positions a grid cell responsively across different breakpoints with automatic border management.
 * Each cell can have different positioning and spanning behavior at each screen size.
 * 
 * @param {List} $pos - List of position tuples for each breakpoint
 *                      Format: (col-start row-start col-span row-span) for base, xs, sm, md, lg, xl
 * @param {List} $columns - Column counts for each breakpoint (from grid-container)
 * @param {List} $rows - Row counts for each breakpoint (from grid-container)
 * @param {Length} $width - Border width (defaults to theme thick border)
 * @param {Color} $color - Border color (defaults to theme border color)
 * 
 * @example
 *   // Cell spans full width on mobile, half width on tablet+
 *   $positions: (1 1 1 1), (1 1 1 1), (1 1 1 1), (1 1 2 1), (1 1 2 1), (1 1 2 1);
 *   @include grid-cell($positions, $grid-columns, $grid-rows);
 */
@mixin grid-cell(
	$pos,
	$columns,
	$rows,
	$width: $size-layout-thickness-thick,
	$color: $palette-functional-border
) {
	@include grid-cell-styles(
		list.nth($pos, 1),
		list.nth($columns, 1),
		list.nth($rows, 1),
		$color,
		$width
	);

	@for $i from 1 through list.length($breakpoint-names) {
		@media (min-width: list.nth($breakpoint-sizes, $i)) {
			@include grid-cell-styles(
				list.nth($pos, $i + 1),
				list.nth($columns, $i + 1),
				list.nth($rows, $i + 1),
				$color,
				$width
			);
		}
	}
}
